mobile vegetation shaders ---------------------------------------------------  1. what do they do? --------------------------------------------------- i have created the ats mobile vegetation shaders to bring nicely bending trees, foliage and grass even to mobile devices.due to the computation limits of those devices they do not support any real time lighting, bump mapping or even translucency - all they support is just one diffuse map and baked in lighting and ambient occlusion. please note that these shaders are not designed to work with the built in terrain engine - they do not - at least not perfectly. instead of this they support the free placement of your models and work fine with custom terrains like those created with t4m for example. they also support batching, occlusion culling and can be combined with unity‘s built in or any other custom lod system.   2. how to use them --------------------------------------------------- the package ships with with 5 different shaders from which 4 are made for trees or foliage like fern.  - atsVegetation-Unlit-Lightmap-Wind alpha blended: should be the fastest shader at least on iphone and ipad using alpha blending to render transparent parts like leaves -Â but needs optimized and broken up models to produce convincing results. please note: the alpha blending shader won‘t work with standard skyboxes but a custom one rendering even faster ships with the package.  - atsVegetation-Unlit-Lightmap-Wind alpha blended 1sided: this shader works with just single sided geometry but will produce even more artifacts as far as z-sorting and lightmapping is concerned. it is supposed to be used only on models pretty far away from the camera (like in demo scene „test_01_alphablended LOD“).  - atsVegetation-Unlit-Lightmap-Wind alpha tested: usually not as fast as the shader using alpha blending but might be faster on some android devices. anyway: it is good for quickly test your models.  - atsVegetation-Unlit-Lightmap-Wind opaque: shader used on opaque geometry like trunks in case you use more than one material on your trees or foliage.  - atsGrass-Unlit-Wind: shader for grass using alpha blending but without supporting any lighting - even lightmaps are not supported which makes it pretty fast but forces you to adjust the diffuse texture to the lighting situation.  2.1. choosing the appropriate shader --------------------------------------------------- the package provides 2 scenes so you can quickly test which shader better fits the needs of your target platform. just let them run on you device and see if you go better with alpha blending or alpha testing as far as performance is concerned (in this case: frames per second). of course you can even mix both shaders in one scene in case one of your models really needs alpha testing to look nice.   2.2. preparing your models --------------------------------------------------- whether you go with alpha testing or alpha blending i would always suppose to start with a simple mesh of your model and use the alpha testing shader to set up the bending.  please note that when creating trees or foliage like fern you will (mostly) need double sided geometry on all leaves due to lightmapping whereas the grass shader support single sided geometry as it is fully unlit.  as all bending is controlled by vertex colors you will have to setup the vertex colors within your 3d app first. bending consists of three parts: - primary bending: bending of the whole model controlled by vertex blue - secondary bending: bending of branches controlled by vertex red - edge fluttering controlled by vertex green  to start it might just be enough to apply a linear gradient from blue=0 at the bottom or pivot to blue=0.5 at the top of your model (i do not suggest to use blue=1 right on your first model. this would mean max bending and would not let you create a model with more bending like may be a taller and thinner tree. please keep in mind that wind settings like direction and strength for all different kinds of foliage are equal - but different kinds of plants might react differently to wind according to their overall size, size of leaves, stiffness and so on and so forth. for this reason all plants within your scene need their own main bending which means: all different plants do have to have unique maximum values of vertex blue in order to achieve a variety in bending. so it is very useful to constantly compare all models and their bending to each other within Unity during the process of adjusting the vertex colors.)  using the alpha test shader this already gives you a nicely bending tree for example - at least if you make sure that the „setupAtsMobileVegetationShaders“-script is assigned to any gameobject within your scene, because this script provides the needed wind parameters to all shaders. please note that the bending of the ats mobile vegetation shaders has nothing to do with unityÃ¢ÂÂs wind zone nor the wind parameters you find in the terrain settings.  after having tested the main bending you might want to add secondary bending and edge fluttering by adding different shades of vertex red and vertex green to certain parts of your model but please make sure that the connecting point (or pivots) of the branches and leaves have vertex color green and red=0. otherwise leaves might loose connection to their parent geometry.  last but not least you can bake ambient occlusion to vertex color alpha. how you will do this is up to you and depends on your 3d app. this might really improve the visual impact even if you assign lightmapping to your models in case the lightmap resolution of any model is not that highÃ¢ÂÂ¦  in case you are using the grass shader only vertex blue is looked up by the shader which controls the overall bending. you do not have to adjust any other vertex colors on those models.   2.3. testing and adjusting your models --------------------------------------------------- bring your models to unity and place them in your scene. assign the „atsVegetation-Unlit-Lightmap-Wind alpha tested“ shader to them, make sure that the „setupAtsMobileVegetationShaders“-script is assigned to any gameobject within your scene and hit play. in case you do not like the result go back to your 3d app and tweak the vertex colors or try to tweak the wind parameters set up in the „setupAtsMobileVegetationShaders“-script, where wind.xyz describe the wind direction, wind.w its strength, which will be changed over time by the script according to your frequency settings.  in order to make taking control over the secondary bending a little bit easier just inside unity the shader comes with a „Factor for up and down bending“.    2.4. using the alpha blended shader --------------------------------------------------- in case your are targeting iphone, ipad or most android devices i highly recommend to use the alpha blending shader instead of the alpha testing one. usually alpha blending leads to a lot of z-buffer problems making leaves shining through leaves which should be occluded. you won‘ÂÂt be able to completely get rid of these problems but by breaking up your model into different meshes you can reduce those artifacts a lot. just have a look at the provided „spruce_18m_splitted“ model for further details. the way how to split up your models depends on the models geometry and the players perspective: the „spruce_18m_splitted“ model is optimized for a first person perspective. therefore its lower leave planes are more or less completely seperated from each other whereas the upper leave planes are not. splitting up your models into different meshes of course leads to much higher numbers of draw calls. in case you are using the pro license static batching will give you back a reasonable number of draw calls but even if not splitted models using the alpha blending shader will usually render faster than unique meshes using the alpha testing shader.   2.4. baking the lightmaps --------------------------------------------------- unfortunately both shaders won‘t give you accurate results when baking lightmaps. in order to get around this, just apply the orginial alpha testing shader (transparent/cutout/diffuse) to all materials using either the alpha blending or alpha testing shader, bake the lightmaps and then reassign the ats mobile shaders again.   2.5. performance optimizations --------------------------------------------------- in order to take full advantage of static batching you should try to share as many materials as possible on your models. do so by creating one big texture atlas - at least for all meshes using the grass shader and smaller foliage like fern. it might be a little bit tricky to create a texture atlas for your trees as you probably want to use texture tiling at least on the bark but it also can be done. next to that it is very important that all objects are marked as „static“ to be batched of course. third point would be to place your objects on different layers which get culled at different distances. just have a look at the both demo scenes. fourth: check the „scale in lightmap“ of each object and adjust it so that all trees and smaller foliage share one single lightmap. fifth: check whether is is an option for you to work with LOD groups (like in demo scene „test_01_alphablended LOD“). this probably won‘t reduce the number of draw calls but the number of vertices and tris send to the gpu.   2.6. tips on grass --------------------------------------------------- grass is fully unlit. so even if you have adjusted your grass textures to the main lighting of your scene, grass placed at dark and shadowed areas might look pretty weird. simply get around this by first placing all your trees and other game objects and bake the lightmaps. then add some different shades of the original grass texture to your texture atlas, duplicate your grass mesh and adjust its uvs so they are poiting to the darkened texture and place those models at the according areas of your scene. both scenes provided with the package uses this method.